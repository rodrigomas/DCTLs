// SoftClipV2.1Plugin export DCTL

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{

  	// Choose bypass, cineon, or logC (when cineon bool = false)
	int bypass = 0;
	int cineon = 0;
	bool Bypass = bypass == 1;
	bool Cineon = cineon == 1;
	
	// enable signal split and highlight display (signal > 1.0)
	int highlightdisplay = 0;
	bool HighlightDisplay = highlightdisplay == 1;
	
	// Highlight and Soft-Clip parameters
	float HighlightGain = 1.0f;
	float HighlightGamma = 1.0f;
	float SoftClipMin = 0.6f;
	float SoftClipMax = 1.0f;
																	 
	float cr = (_powf(10, (1023.0f * p_R - 685.0f) / 300.0f) - 0.0108f) / (1.0f - 0.0108f);    
	float cg = (_powf(10, (1023.0f * p_G - 685.0f) / 300.0f) - 0.0108f) / (1.0f - 0.0108f);   
	float cb = (_powf(10, (1023.0f * p_B - 685.0f) / 300.0f) - 0.0108f) / (1.0f - 0.0108f);    
																  
	float lr = p_R > 0.1496582f ? (_powf(10, (p_R - 0.385537f) / 0.2471896f) - 0.052272f) / 5.555556f : (p_R - 0.092809f) / 5.367655f;   
	float lg = p_G > 0.1496582f ? (_powf(10, (p_G - 0.385537f) / 0.2471896f) - 0.052272f) / 5.555556f : (p_G - 0.092809f) / 5.367655f;   
	float lb = p_B > 0.1496582f ? (_powf(10, (p_B - 0.385537f) / 0.2471896f) - 0.052272f) / 5.555556f : (p_B - 0.092809f) / 5.367655f;   
																			  
	float mr = (lr * 1.617523f) + (lg * -0.537287f) + (lb * -0.080237f);    
	float mg = (lr * -0.070573f) + (lg * 1.334613f) + (lb * -0.26404f);    
	float mb = (lr * -0.021102f) + (lg * -0.226954f) + (lb * 1.248056f);    
																			  
	float sr = Bypass ? p_R : (Cineon ? cr : mr);			
	float sg = Bypass ? p_G : (Cineon ? cg : mg);			
	float sb = Bypass ? p_B : (Cineon ? cb : mb);			
																			  
	float Lr = sr > 1.0f ? 1.0f : sr;									 
	float Lg = sg > 1.0f ? 1.0f : sg;									 
	float Lb = sb > 1.0f ? 1.0f : sb;									 
																			   																		  
	float Hr = (sr < 1.0f ? 1.0f : sr) - 1.0f;							
	float Hg = (sg < 1.0f ? 1.0f : sg) - 1.0f;							
	float Hb = (sb < 1.0f ? 1.0f : sb) - 1.0f;							
																			  
	float rr = HighlightGain;												
	float gg = HighlightGamma;	
	float aa = SoftClipMax;										
	float bb = SoftClipMin;														
																			  
	float Hrr = Hr * rr;											
	float Hgg = Hg * rr;											
	float Hbb = Hb * rr;											
	float HR = 1.0f - _powf(1.0f - Hrr, gg);							
	float HG = 1.0f - _powf(1.0f - Hgg, gg);							
	float HB = 1.0f - _powf(1.0f - Hbb, gg);								  
																		  
	float R = Lr + HR;												
	float G = Lg + HG;												
	float B = Lb + HB;												
																			  																		  
	float CR = (bb == 1.0f) && (aa == 1.0f) ? R : (R > bb ? (-1.0f / ((R - bb) / (aa - bb) + 1.0f) + 1.0f) * (aa - bb) + bb : R);  
	float CG = (bb == 1.0f) && (aa == 1.0f) ? G : (G > bb ? (-1.0f / ((G - bb) / (aa - bb) + 1.0f) + 1.0f) * (aa - bb) + bb : G);  
	float CB = (bb == 1.0f) && (aa == 1.0f) ? B : (B > bb ? (-1.0f / ((B - bb) / (aa - bb) + 1.0f) + 1.0f) * (aa - bb) + bb : B);  
																			  
	float SR = Bypass ? CR : (CR < 0.018f ? (CR * 4.5f) : 1.099f * _powf(CR, 0.45f) - 0.099f);   
	float SG = Bypass ? CG : (CG < 0.018f ? (CG * 4.5f) : 1.099f * _powf(CG, 0.45f) - 0.099f);   
	float SB = Bypass ? CB : (CB < 0.018f ? (CB * 4.5f) : 1.099f * _powf(CB, 0.45f) - 0.099f);   
																			  
	const float r = HighlightDisplay ? (SR < 1.0f ? 1.0f : SR) - 1.0f : SR;				
	const float g = HighlightDisplay ? (SG < 1.0f ? 1.0f : SG) - 1.0f : SG;				
	const float b = HighlightDisplay ? (SB < 1.0f ? 1.0f : SB) - 1.0f : SB;				

    return make_float3(r, g, b);
}
