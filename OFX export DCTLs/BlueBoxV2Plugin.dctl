// BlueBoxV2Plugin export DCTL

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
	   // switches for display matte, invert alpha
	   int displaymatte = 1;
	   bool DisplayMatte = displaymatte == 1;
	   int invertalpha = 0;
	   bool InvertAlpha = invertalpha == 1;
	   
	   // matte parameter values
	   float high = 1.0f;
	   float highfade = 1.0f;
	   float lowfade = 1.0f;
	   float low = 0.0f;
	   float highfadecurve = 1.0f;
	   float lowfadecurve = 1.0f;
	   float offset = 0.0f;
	   float mix = 0.0f;
	   
	   float luma = (p_R * 0.2126f) + (p_G * 0.7152f) + (p_B * 0.0722f);
	   float blue = p_B > p_R ? p_R : p_B;  
	   float L = luma - offset;								
	   float q = _fminf(L, 1.0f);									
	   float n = _fmaxf(q, 0.0f);
	   
	   float highalpha = high + n == 0.0f ? 0.0f : high - (1.0f - highfade) >= n ? 1.0f : (high >= n ? _powf((high - n) / (1.0f - highfade), highfadecurve) : 0.0f);
	   float lowalpha = low + n == 2.0f ? 0.0f : low + lowfade <= n ? 1.0f : (low <= n ? _powf((n - low) / lowfade, lowfadecurve) : 0.0f);
	   float alpha = highalpha * lowalpha;
	   float alphaM = alpha + (1.0f - alpha) * mix;
	   float alphaV = InvertAlpha ? 1.0f - alphaM : alphaM;
	   float r = DisplayMatte ? alphaV : p_R;
	   float g = DisplayMatte ? alphaV : p_G;
	   float b = DisplayMatte ? alphaV : p_B * (1.0f - alphaV) + (blue * alphaV);

	   return make_float3(r, g, b);
}
