// Arri Lut (LogC AWG to Lin to rec709 to logC to tonemap)

__DEVICE__ float logclin(float p_Channel) // logC to linear
{
	float lin = p_Channel > 0.1496582f ? (_powf(10.0f, (p_Channel - 0.385537f) / 0.2471896f) - 0.052272f) / 5.555556f : (p_Channel - 0.092809f) / 5.367655f;
	return lin;
}

__DEVICE__ float linlogc(float p_Channel) // linear to logC
{
	float log = p_Channel > 0.010591f ? 0.247190f * _log10f(5.555556f * p_Channel + 0.052272f) + 0.385537f : 5.367655f * p_Channel + 0.092809f;
	return log;
}

__DEVICE__ float logistic(float p_Channel) // tonemaps logC
{
	float x = 1.0f / (1.0f + _powf(2.718281828459045, -8.9f*(p_Channel - 0.435f)));
	return x;	
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
 
 	// logC to linear
 
 	float linR = logclin(p_R);
 	float linG = logclin(p_G);
 	float linB = logclin(p_B);
 	
 	// alexawidegamut to rec709 primaries for linear signal
 	
    float matrix[9] = {1.617523f, -0.537287f, -0.080237f, -0.070573f, 1.334613f, -0.26404f, -0.021102f, -0.226954f, 1.248056f};
    
	float matR = matrix[0]*linR + matrix[1]*linG + matrix[2]*linB;
	float matG = matrix[3]*linR + matrix[4]*linG + matrix[5]*linB;
	float matB = matrix[6]*linR + matrix[7]*linG + matrix[8]*linB;
	
	// linear to logC
	
	float logR = linlogc(matR);
	float logG = linlogc(matG);
	float logB = linlogc(matB);
	
	// logC tonemapped
	
	float r = logistic(logR);
	float g = logistic(logG);
	float b = logistic(logB);
	
    return make_float3(r, g, b);

}



